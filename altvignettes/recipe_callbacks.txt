The following is how to gather the info from a layer on training, perhaps. 
```{r}
# Recipe from stackencoder: 
# Is there a way to get layers output during training, at each batch? #3469
# answer from mheyman commented on Feb 20 
# I have a hack that may always work - all I can say is it worked for me with a tensorflow backend when calling model.train_on_batch().
# 
# The trick is to add whatever output tensors you want to see to model.metrics_tensors after calling model.compile():
# 
model.compile(loss='loser', optimizer='whoosh')
model.metrics_tensors = [my_layer]
# Then, when you run the model.train_on_batch(), you get a list of outputs. Your first output is the loss, the remaining ones are numpy arrays holding your requested output tensor values, one row for each batch row.
# 
# I'm not certain how this would collide with actual additional metrics - I've only ever done it with just a loss function.

#This is how to find tensor by layer name, adding a bit more to @mheyman 's solution:
model.compile(loss='loser', optimizer='whoosh')
output_layers = ['output1', 'output2']
model.metrics_tensors += [layer.output for layer in model.layers if layer.name in output_layers]

```

This is to be put inside a callback to operate on_batch to obtain the entropies and store them in a df initialized a the beginning of the training and then updated on every successive batch update.
Use ([training callbacks](https://tensorflow.rstudio.com/keras/articles/training_callbacks.html)) under "Custom Callbacks".

Q: Are epoch updates worth observing?

An attempt at writing a callback
```{r}

```


The following is a list of primitives found for manipulating the outputs of the models.

```{r}
# Observers for model layers and their outputs in R
lapply(SAE$layers, function(l){l$name})#list of layers by name
lastLayer <- get_layer(SAE,name="Xprime")#select a layer
names(lastLayer)# find components of layers
class(lastLayer$output)#find type of output component of a layer
lastOutput <- lastLayer$output#This is a Tensorflow tensor.
# How to extract infor from a tensor in TF
# https://tensorflow.rstudio.com/tensorflow/articles/using_tensorflow_api.html
# use the API
library(tensorflow)
```







